// JAC Scoreboard

doctype html
style
	include css/scoreboard.css
html
	head
		script(src="jquery/dist/jquery.min.js")
		script(src="d3/d3.min.js") 
		script(src="epoch-charting/dist/js/epoch.min.js")
		link(rel="stylesheet", type="text/css", href="epoch-charting/dist/css/epoch.min.css")
		title JAC OP/ED Night Scores
	body
		center
			h1 Current Selection
			h2(id = "currentSelection" style="color: red;") Nothing yet!
			br
			h1 Latest Buzzes
			h2(id = "lastBuzz" style="color: red;") Nothing yet! 
		input(id="start" type="button" value="Start" onclick="startFunction();")
		input(id="reset" type="button" value="Reset" onclick="resetFunction();")
		input(id="correctAnswer" type="button" value="Correct" onclick="correctFunction();")
		input(id="incorrectAnswer" type="button" value="Incorrect" onclick="incorrectFunction();")
		div(id="scoreboardGraph", class="epoch category10", style="height: 400px;")
			

	script(src="/socket.io/socket.io.js")
	script var tableData =  !{JSON.stringify(data)};
	script.
		// TODO: Represent and tally points.
		var teams = [];
		var teamDict = {}; // create javascript associative array
		var audio;
		var currentPointValue = 0;
		var ongoingGame = false;
		var buzzList = [];
		var currentPointValue = 0;
		var refreshList = function(){
			lastBuzz.innerHTML = "";
			for(var i = 0; i < buzzList.length; i++){
				lastBuzz.innerHTML += (i + 1) + ". " + buzzList[i] + "<br />";
			}		
		}
		var categories = tableData.categories;
		var currentSelection = document.getElementById("currentSelection");
		var lastBuzz = document.getElementById("lastBuzz");
		var socket = io.connect();
		// Graph Variables
		var graphData = [
			{ 
				label: 'Layer 1', 
				values: [ 
					{x: "Team 3", y: 0}, 
					{x: "Team 2", y: 0}, 
					{x: "Team 1", y: 0} 
				] 
			}
		];
		
		var scoreboardChart = $('#scoreboardGraph').epoch({
			type: 'bar',
			data: graphData,
			axes: ['left', 'bottom'],
			orientation: 'horizontal'
		});   
		
		// Handlers for buttons
		//Start function starts the game and sets up the graph
		function startFunction() {
			console.log("game started");
			console.log(teams.length);
			for (i = 0; i < teams.length; i++)
			{
				var newTeam = [];
				newTeam["x"] = teams[i];
				newTeam["y"] = 0;
				graphData[0]["values"].push(newTeam); 
			}
			// update graph	
			scoreboardChart.update(graphData);
			console.log(graphData[0]["values"]);
			ongoingGame = true;
			return 0;
		};
		function resetFunction() {
			ongoingGame = false;
			graphData[0]["values"] = [];
			teams = [];
			teamDict = {};
			buzzList = [];
			refreshList();
			scoreboardChart.update(graphData);
			return 0;
		};
		// TODO: Add reveal of correct Answer 
		function correctFunction() {
			if (buzzList.length > 0)
			{
				teamDict[buzzList[0]] += currentPointValue;
				for (i = 0; i < graphData[0]["values"].length; i ++)
				{
					if (graphData[0]["values"][i]["x"] == buzzList[0])
					{
						graphData[0]["values"][i]["y"] = teamDict[buzzList[0]];
						break;
					}
				}
				scoreboardChart.update(graphData);
				currentPointValue = 0;
				audio.pause();
			}
			return 0;
		};
		
		function incorrectFunction() {
			if (buzzList.length > 0)
			{
				teamDict[buzzList[0]] -= currentPointValue;
				for (i = 0; i < graphData[0]["values"].length; i ++)
				{
					if (graphData[0]["values"][i]["x"] == buzzList[0])
					{
						graphData[0]["values"][i]["y"] = teamDict[buzzList[0]];
						break;
					}
				}
				buzzList.shift();
				refreshList();
				if (buzzList.length == 0) // if there are no more queued up buzzers then resume play
					audio.play();
				scoreboardChart.update(graphData);
			}
			return 0;
		};
		
		// When a selection is made, the audio for that song will be played, based on information provided by the server, which retrieves the information from config.js.
		// TODO: Only perform when the game has started
		socket.on('scoreboard-selection', function(data){
			var col = data.choice.charAt(0);
			var row = data.choice.charAt(1);

			console.log("Cell " + data.choice);
			currentSelection.innerHTML = categories[col] + ", difficulty: " + (100 + 100 * row);
			buzzList = [];
			currentPointValue = 100 + 100 * row;
			refreshList();

			console.log("col: " + col);
			console.log("row: " + row);
			audio = new Audio(tableData.songs[col][row]);
			console.log(audio);
			audio.play();
		});
		
		// When a buzz is received, the song is paused. 
		// TODO: Do not allow repeat buzzes in the current song
		socket.on('scoreboard-buzz', function(data){
			console.log("Buzz from " + data.team + "!");
			// Users buzz in to register their team. Registers if not already present
			if (ongoingGame == false && teams.indexOf(data.team.toUpperCase()) == -1)
			{
				teams.push(data.team.toUpperCase());
				teamDict[data.team.toUpperCase()] = 0; // set points of team to 0
			}
			if (buzzList.indexOf(data.team.toUpperCase()) < 0)
			{ // Disallow repeated buzzes - may need to remove this depending on game design.
				if (ongoingGame == true)
				{
					if (teams.indexOf(data.team.toUpperCase()) != -1) // check to make sure that team is registered
					{
						// TODO: Invalid team. Output error message via socket.io
						buzzList.push(data.team.toUpperCase());
						refreshList();
						audio.pause();
					}
				}
				else // the game has not begun yet. Use the buzzer list to display teams
				{
					buzzList.push(data.team.toUpperCase());
					refreshList();
				}
			}
		});
